<?xml version="1.0" encoding="utf-8" ?>
<project name="Ranorex_Automation" default="openreport" basedir=".">
  <property name="basename" value="RanorexTestFramework"/>
  <property name="basedir" value="."/>
  <property name="debug" value="true"/>
  <property name="build.dir" value="build"/>
  <property name="lib.dir" value="${basedir}/lib"/>
  <property name="report.dir" value="${basedir}/AutomationReports"/>
  <property name="resources" value="${basedir}/Resources"/>
	

  <!--	Target to clean build directory-->
  <target name="clean" description="cleans build directory">
    <delete dir="${build.dir}" verbose="true" failonerror="false"/>
	<choose>
	<when test="${directory::exists(report.dir)}">	
	</when>
	<otherwise>
	<mkdir dir="${report.dir}"/>
	</otherwise>
	</choose>
	<choose>
  	<when test="${directory::exists(report.dir+'/recent')}">
  		<property name="myprop" value="${directory::get-creation-time(report.dir+'/recent')}"/>
  		<property name="dateprop" value="${convert::to-string(datetime::get-day(myprop))}"/>
  		<property name="monthprop" value="${convert::to-string(datetime::get-month(myprop))}"/>
  		<property name="yearprop" value="${convert::to-string(datetime::get-year(myprop))}"/>
  		<property name="hourprop" value="${convert::to-string(datetime::get-hour(myprop))}"/>
  		<property name="minuteprop" value="${convert::to-string(datetime::get-minute(myprop))}"/>
  		<property name="secprop" value="${convert::to-string(datetime::get-second(myprop))}"/>
  		<property name="myproptouse" value="${dateprop+'_'+monthprop+'_'+yearprop+'_'+hourprop+'_'+minuteprop+'_'+secprop}"/>
		<mkdir dir="${report.dir}/${myproptouse}"/>
  		
		<copy todir="${report.dir}/${myproptouse}">
  		<fileset basedir="${report.dir}/recent">
        <include name="**/*" />
   		 </fileset>

  		</copy>
		<delete dir="${report.dir}/recent"/>
		<mkdir dir="${report.dir}/recent"/>
		</when>
  	<otherwise>
		<mkdir dir="${report.dir}/recent"/>
		</otherwise>
  	</choose>
  </target>


  <!--	Target to debug the project-->
  <target name="debug" depends="clean">
    <property name="debug" value="true"/>
  </target>


  <target name="release" depends="clean">
    <property name="debug" value="false"/>
  </target>


  <!--	Target to compile the project-->
  <target name="build" depends="clean">
    <mkdir dir="${build.dir}"/>
    <echo message="compiling.........."/>

    <csc  target="library" doc="${build.dir}\${basename}.xml" output="${build.dir}\${basename}.dll">
      <sources>
        <include name="${basedir}\**\*.cs"/>
      </sources>
      <references>
        <include name="${lib.dir}\nunit.framework.dll" />
        <include name="${lib.dir}\nunit.core.dll" />
        <include name="${lib.dir}\nunit.core.interfaces.dll" />
        <include name="${lib.dir}\Ranorex.Core.dll" />
        <include name="${lib.dir}\Ranorex.Plugin.Flex.dll" />
        <include name="${lib.dir}\Ranorex.Plugin.ChromeWeb.dll" />
        <include name="${lib.dir}\Ranorex.Plugin.Java.dll" />
        <include name="${lib.dir}\Ranorex.Plugin.MozillaWeb.dll" />
        <include name="${lib.dir}\Ranorex.Plugin.Web.dll" />
        <include name="${lib.dir}\Newtonsoft.Json.dll" />
        <include name="${lib.dir}\Ranorex.Plugin.Win32.dll" />
        <include name="${lib.dir}\Ranorex.Plugin.WinForms.dll" />
        <include name="${lib.dir}\log4net.dll" />
        <include name="${lib.dir}\NPOI.dll"/>
        <include name="${lib.dir}\Microsoft.Office.Interop.Excel.dll"/>
      	<include name="${lib.dir}\NAnt.Core.dll"/>  	      
     
      </references>
    </csc>
  </target>


  <!--	Target to copy references to compiled project-->
  <target name="copyRef" depends="copyConfig,build">
    <copy todir="${build.dir}">
      <fileset basedir="${lib.dir}">
        <include name="*.*" />
      </fileset>
    </copy>
  </target>
  <target name="copyConfig">
    <copy file="${basedir}\Config\app.config"
          tofile="${lib.dir}\${basename}.dll.config"
          inputencoding="utf-8"
                overwrite="true" outputencoding="utf-8" />
  </target>

<target name="run" depends="copyRef">
<nunit2 haltonfailure="false" failonerror="false" verbose="true">
    <formatter type="Xml" usefile="true" extension=".xml" outputdir="${report.dir}/recent"/>
    <test assemblyname="${build.dir}\${basename}.dll" appconfig="${lib.dir}\${basename}.dll.config" >
    	<assemblies>
    	<include name="MyNunitListener.dll" />
    	</assemblies>
 <references basedir="${build.dir}">
            <include name="MyNunitListener.dll" />
            
        </references>
</test>
</nunit2>
  </target>
<target name="nunitreport" depends="run" >
	<nunit2report format="frames" opendesc="true" todir="${report.dir}/recent" verbose="true">
		<fileset>
		
			<include name="${report.dir}/recent/${basename}.dll-results.xml"/>
			
		</fileset>
		</nunit2report>
</target>
<!-- Target to generate and launch html report-->
 <target name="openreport"  depends="nunitreport">

   <property name="Reportdir" value="${report.dir}/recent" />
   <script language="C#" prefix="util">
     <references>
        <include name="System.dll" />
    </references>       
    <imports>
        <import namespace="System.Collections.Generic" />
    </imports> 
   <code>  
         <![CDATA[
   public static void ScriptMain(Project project)
   {
    var location = "";
    foreach (DictionaryEntry entry in project.Properties)
                {
                    //Console.WriteLine("{0}={1}", entry.Key, entry.Value);
     if(entry.Key.ToString().Equals("Reportdir"))
     {
     location =  entry.Value.ToString() + @"\index.htm";
     }
                }
//Console.writeLine(location);
    System.Diagnostics.Process.Start(location);
   }
         ]]>
   </code>
     </script>
 </target>
	<target name="document">
	<ndoc>
    <assemblies basedir="${build.dir}">
       <!-- <include name="NAnt.exe" />-->
        <include name="${basename}.dll" />
    </assemblies>
 <summaries basedir="${build.dir}">
        <include name="${basename}.xml" />
    </summaries>
    <documenters>
        <documenter name="MSDN">
            <property name="OutputDirectory" value="Resources\Documentation\${basename}" />
            <property name="HtmlHelpName" value="NAnt" />
            <property name="IncludeFavorites" value="False" />
            <property name="Title" value="An NDoc Documented Class Library" />
            <property name="SplitTOCs" value="False" />
            <property name="DefaulTOC" value="" />
            <property name="ShowVisualBasic" value="True" />
            <property name="ShowMissingSummaries" value="True" />
            <property name="ShowMissingRemarks" value="True" />
            <property name="ShowMissingParams" value="True" />
            <property name="ShowMissingReturns" value="True" />
            <property name="ShowMissingValues" value="True" />
            <property name="DocumentInternals" value="False" />
            <property name="DocumentProtected" value="True" />
            <property name="DocumentPrivates" value="False" />
            <property name="DocumentEmptyNamespaces" value="False" />
            <property name="IncludeAssemblyVersion" value="False" />
            <property name="CopyrightText" value="" />
            <property name="CopyrightHref" value="" />
         </documenter>
    </documenters> 
</ndoc>
	</target>
	
<target name="archieveReports" depends="run">
<zip zipfile="LatestRunResults.zip">
                <fileset basedir="${report.dir}/recent" prefix="recent">
                    <include name="**/*" />
                </fileset>                
            </zip>
</target>
	
	<!-- Not Working (SMTP authentication needed)-->
<target name="mailReports" depends="archieveReports">
<mail 
                from="vijaya.daram@zenq.com" 
                tolist="vijaya.daram@zenq.com"                
                subject="Msg 7: With attachments" 
                mailhost="smtp.gmail.com">
                 
                <attachments>
                    <include name="LatestRunResults.zip" />
                </attachments>
            </mail>
</target>
</project>